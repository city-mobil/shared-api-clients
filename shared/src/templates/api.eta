import { BaseApi, BaseApiParams, BaseApiErrorHandler, BaseHTTPClientResponse, BaseHTTPClientError, BaseHTTPClientConfigOverride } from '@company/shared'

<%
const { apiConfig, routes, utils, config, extra = '' } = it;
const { info, servers, externalDocs } = apiConfig;
const { _, require, formatDescription } = utils;

const serviceName = it.fileName.replace('.ts', '')

const server = (servers && servers[0]) || { url: "" };

const descriptionLines = _.compact([
  `@title ${info.title || "No title"}`,
  info.version && `@version ${info.version}`,
  info.license && `@license ${_.compact([
    info.license.name,
    info.license.url && `(${info.license.url})`,
  ]).join(" ")}`,
  info.termsOfService && `@termsOfService ${info.termsOfService}`,
  server.url && `@baseUrl ${server.url}`,
  externalDocs.url && `@externalDocs ${externalDocs.url}`,
  info.contact && `@contact ${_.compact([
    info.contact.name,
    info.contact.email && `<${info.contact.email}>`,
    info.contact.url && `(${info.contact.url})`,
  ]).join(" ")}`,
  info.description && " ",
  info.description && _.replace(formatDescription(info.description), /\n/g, "\n * "),
]);

const allHeadersList = []

if (routes.combined) {
    routes.combined.forEach((item) => {
       (item.routes || []).forEach((route) => {
         const headers = route.request && route.request.headers && route.request.headers.type || '';
         const headersList = headers.match(/"[a-zA-Z-_]+"/g) || [];

         allHeadersList.push(...headersList.map((header) => ({
           key: _.snakeCase(header.replace('"', '').replace('"', '')).toUpperCase(),
           value: header,
         })).map((item) => `${item.key} = ${item.value}`));
       })
    })
}

const uniqHeaders = _.uniq(allHeadersList)

%>

export enum <%~ serviceName %>Headers {
  <% uniqHeaders.forEach((header) => { %>
    <%~ `${header}, ` %>
  <% }) %>
}

<% if (descriptionLines.length) { %>
/**
<% descriptionLines.forEach((descriptionLine) => { %>
* <%~ descriptionLine %>

<% }) %>
*/
<% } %>

export class <%~ serviceName %> extends BaseApi {
  constructor(params: BaseApiParams) {
    super(params)
  }

  <%~ extra %>

<% routes.outOfModule && routes.outOfModule.forEach((route) => { %>

        <%~ includeFile('./procedure-call.eta', { ...it, route }) %>

<% }) %>

<% routes.combined && routes.combined.forEach(({ routes = [], moduleName }) => { %>

    <% routes.forEach((route) => { %>

        <%~ includeFile('./procedure-call.eta', { ...it, route }) %>

    <% }) %>

<% }) %>

}
